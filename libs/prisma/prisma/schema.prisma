// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model DiscordProfile {
  id            String    @id @default(cuid())
  userId        String    @unique @map("user_id")
  discordId     String    @unique @map("discord_id")
  username      String
  discriminator String
  avatar        String?
  locale        String
  verified      Boolean
  flags         Int
  public_flags  Int
  mfa_enabled   Boolean
  createdAt     DateTime? @default(now()) @map("created_at")
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, discordId])
  @@map("discord_profiles")
}

model User {
  id                 String                     @id @default(cuid())
  name               String?
  email              String                     @unique
  emailVerified      DateTime?                  @map("email_verified_at")
  image              String?
  accounts           Account[]
  sessions           Session[]
  discordProfile     DiscordProfile?
  guilds             UserGuilds[]
  profilePreferences FantordProfilePreferences?
  createdAt          DateTime?                  @default(now()) @map("created_at")
  updatedAt          DateTime?                  @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model UserGuilds {
  id             String  @id @default(cuid())
  discordGuildId String  @map("discord_guild_id")
  userId         String  @map("user_id")
  name           String
  icon           String
  isOwner        Boolean @map("is_owner")
  hasFantordBot  Boolean @default(false) @map("has_fantord_bot")
  permissions    String
  showPublic     Boolean @default(true) @map("show_public")
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_guilds")
}

model FantordProfilePreferences {
  id         String    @id @default(cuid())
  userId     String    @unique @map("user_id")
  showPublic Boolean   @default(true) @map("show_public")
  showGuilds Boolean   @default(true) @map("show_guilds")
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("fantord_profile_preferences")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
