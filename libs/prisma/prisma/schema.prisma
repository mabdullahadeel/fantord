// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                      String  @id @default(cuid())
  userId                  String  @map("user_id")
  type                    String
  provider                String
  providerAccountId       String   @map("provider_account_id")
  refresh_token           String?  @db.Text
  access_token            String?  @db.Text
  expires_at              Int?
  token_type              String?
  scope                   String?
  id_token                String?  @db.Text
  session_state           String?

  user                    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model DiscordProfile {
  id                      String  @id @default(cuid())
  userId                  String  @map("user_id")
  discordId               String  @map("discord_id")  @unique
  username                String
  discriminator           String
  avatar                  String?
  locale                  String
  verified                Boolean
  flags                   Int
  public_flags            Int
  mfa_enabled             Boolean
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at") @default(now())
  
  user                    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("discord_profiles")
  @@index([userId, discordId])
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String    @unique
  emailVerified           DateTime? @map("email_verified_at")
  fantordUsername         String    @map("fantord_username")
  image                   String?
  accounts                Account[]
  sessions                Session[]
  discordProfile          DiscordProfile?
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at") @default(now())

  @@map("users")
}

model Session {
  id                      String   @id @default(cuid())
  sessionToken            String   @unique @map("session_token")
  userId                  String   @map("user_id")
  expires                 DateTime
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier              String
  token                   String   @unique
  expires                 DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
